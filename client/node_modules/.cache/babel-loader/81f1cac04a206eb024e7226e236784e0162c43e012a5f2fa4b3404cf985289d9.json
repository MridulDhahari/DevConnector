{"ast":null,"code":"// import axios from 'axios';\n// import {REGISTER_SUCCESS,REGISTER_FAIL,USER_LOADED,AUTH_ERROR,\n//     LOGIN_SUCCESS,\n//     LOGIN_FAIL,\n//     LOGOUT,\n//     CLEAR_PROFILE\n// } from './types';\n// import {setAlert} from './alert';\n// import setAuthToken from '../utils/setAuthToken';\n\n// //load user\n// export const loadUser = () => async dispatch => {\n//     if(localStorage.token){\n//         setAuthToken(localStorage.token);\n//     }\n//     try{\n//         const res= await axios.get('/api/auth');\n//         dispatch({\n//             type: USER_LOADED,\n//             payload: res.data\n//         })\n//     }catch(err){\n//         dispatch({\n//             type: AUTH_ERROR\n//         });\n\n//     }\n// }\n\n// //register user\n// export const register = ({name,email,password}) => async dispatch =>{\n//     const config = {\n//         headers:{\n//             'Content-Type': 'application/json'\n//         }\n//     }\n\n//     const body = JSON.stringify({name,email,password});\n\n//     try{\n//         const res = await axios.post('api/users',body,config);\n//         dispatch({\n//             type : REGISTER_SUCCESS,\n//             payload: res.data\n//         });\n//         dispatch(loadUser());\n\n//     }catch(err){\n//         const errors = err.response.data.errors;\n//         if(errors){\n//             errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\n//         }\n//         dispatch({\n//             type: REGISTER_FAIL\n//         });\n//     }\n// }\n\n// //login user\n// export const login = (email,password) => async dispatch =>{\n//     const config = {\n//         headers:{\n//             'Content-Type': 'application/json'\n//         }\n//     }\n\n//     const body = JSON.stringify({email,password});\n\n//     try{\n//         const res = await axios.post('api/auth',body,config);\n//         dispatch({\n//             type : LOGIN_SUCCESS,\n//             payload: res.data\n//         });\n//         dispatch(loadUser());\n//     }catch(err){\n//         const errors = err.response.data.errors;\n//         if(errors){\n//             errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\n//         }\n//         dispatch({\n//             type: LOGIN_FAIL,\n//         });\n//     }\n// }\n\n// //Logout / clear\n// export const logout = () => dispatch => {\n//     dispatch({ type: CLEAR_PROFILE});\n//     dispatch({ type: LOGOUT });\n\n// }\n\nimport api from '../utils/api';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\n\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = formData => async dispatch => {\n  try {\n    const res = await api.post('/users', formData);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n  try {\n    const res = await api.post('/auth', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","res","get","type","payload","data","err","register","formData","post","errors","response","forEach","error","msg","login","email","password","body","logout"],"sources":["C:/Users/Dell/OneDrive/Desktop/devconnector/client/src/actions/auth.js"],"sourcesContent":["// import axios from 'axios';\r\n// import {REGISTER_SUCCESS,REGISTER_FAIL,USER_LOADED,AUTH_ERROR,\r\n//     LOGIN_SUCCESS,\r\n//     LOGIN_FAIL,\r\n//     LOGOUT,\r\n//     CLEAR_PROFILE\r\n// } from './types';\r\n// import {setAlert} from './alert';\r\n// import setAuthToken from '../utils/setAuthToken';\r\n\r\n// //load user\r\n// export const loadUser = () => async dispatch => {\r\n//     if(localStorage.token){\r\n//         setAuthToken(localStorage.token);\r\n//     }\r\n//     try{\r\n//         const res= await axios.get('/api/auth');\r\n//         dispatch({\r\n//             type: USER_LOADED,\r\n//             payload: res.data\r\n//         })\r\n//     }catch(err){\r\n//         dispatch({\r\n//             type: AUTH_ERROR\r\n//         });\r\n\r\n//     }\r\n// }\r\n\r\n// //register user\r\n// export const register = ({name,email,password}) => async dispatch =>{\r\n//     const config = {\r\n//         headers:{\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     }\r\n\r\n//     const body = JSON.stringify({name,email,password});\r\n\r\n//     try{\r\n//         const res = await axios.post('api/users',body,config);\r\n//         dispatch({\r\n//             type : REGISTER_SUCCESS,\r\n//             payload: res.data\r\n//         });\r\n//         dispatch(loadUser());\r\n    \r\n//     }catch(err){\r\n//         const errors = err.response.data.errors;\r\n//         if(errors){\r\n//             errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\r\n//         }\r\n//         dispatch({\r\n//             type: REGISTER_FAIL\r\n//         });\r\n//     }\r\n// }\r\n\r\n// //login user\r\n// export const login = (email,password) => async dispatch =>{\r\n//     const config = {\r\n//         headers:{\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     }\r\n\r\n//     const body = JSON.stringify({email,password});\r\n\r\n//     try{\r\n//         const res = await axios.post('api/auth',body,config);\r\n//         dispatch({\r\n//             type : LOGIN_SUCCESS,\r\n//             payload: res.data\r\n//         });\r\n//         dispatch(loadUser());\r\n//     }catch(err){\r\n//         const errors = err.response.data.errors;\r\n//         if(errors){\r\n//             errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\r\n//         }\r\n//         dispatch({\r\n//             type: LOGIN_FAIL,\r\n//         });\r\n//     }\r\n// }\r\n\r\n// //Logout / clear\r\n// export const logout = () => dispatch => {\r\n//     dispatch({ type: CLEAR_PROFILE});\r\n//     dispatch({ type: LOGOUT });\r\n    \r\n// }\r\n\r\n\r\nimport api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT\r\n} from './types';\r\n\r\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    const res = await api.get('/auth');\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = (formData) => async (dispatch) => {\r\n  try {\r\n    const res = await api.post('/users', formData);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const body = { email, password };\r\n\r\n  try {\r\n    const res = await api.post('/auth', body);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = () => ({ type: LOGOUT });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}